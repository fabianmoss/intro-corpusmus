{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Essen Folksong Collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>region</th>\n",
       "      <th>title</th>\n",
       "      <th>key</th>\n",
       "      <th>DGIs</th>\n",
       "      <th>spelled_pitches</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>africa</td>\n",
       "      <td>Muwaschah Lamma Bada</td>\n",
       "      <td>g minor</td>\n",
       "      <td>['P4', 'M2', 'm2', 'M2', 'M-2', 'P1', 'm-2', '...</td>\n",
       "      <td>['D5', 'G5', 'A5', 'B-5', 'C6', 'B-5', 'B-5', ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mexico</td>\n",
       "      <td>CUCA 1</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...</td>\n",
       "      <td>['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>mexico</td>\n",
       "      <td>CUCA 2</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...</td>\n",
       "      <td>['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mexico</td>\n",
       "      <td>CUCA 1</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...</td>\n",
       "      <td>['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>mexico</td>\n",
       "      <td>CUCA 2</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...</td>\n",
       "      <td>['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>misc</td>\n",
       "      <td>Die dienende Schwester Es wohnt ein Markgraf n...</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P4', 'P-4', 'P1', 'P1', 'm-3', 'P4', 'P1', '...</td>\n",
       "      <td>['C4', 'F4', 'C4', 'C4', 'C4', 'A3', 'D4', 'D4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>misc</td>\n",
       "      <td>Winterrosen Es kam ein Fraeulein mit ein'm Krueg</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P-4', 'P4', 'P1', 'P1', 'M2', 'M2', 'M-3', '...</td>\n",
       "      <td>['F4', 'C4', 'F4', 'F4', 'F4', 'G4', 'A4', 'F4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>usa</td>\n",
       "      <td>Die Schlangenkoechin 'Oh, where have you been,</td>\n",
       "      <td>G major</td>\n",
       "      <td>['P1', 'M6', 'P1', 'P1', 'M-2', 'M-2', 'P-4', ...</td>\n",
       "      <td>['D4', 'D4', 'B4', 'B4', 'B4', 'A4', 'G4', 'D4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>usa</td>\n",
       "      <td>Die Schlangenkoechin 'Oh, where have you been,...</td>\n",
       "      <td>G major</td>\n",
       "      <td>['M3', 'P1', 'P1', 'P1', 'M-2', 'M-2', 'P1', '...</td>\n",
       "      <td>['G4', 'B4', 'B4', 'B4', 'B4', 'A4', 'G4', 'G4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>usa</td>\n",
       "      <td>Die Schlangenkoechin 'Oh, where have you been,</td>\n",
       "      <td>G major</td>\n",
       "      <td>['M2', 'M2', 'P1', 'P1', 'P1', 'M-2', 'P1', 'M...</td>\n",
       "      <td>['G4', 'A4', 'B4', 'B4', 'B4', 'B4', 'A4', 'A4...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   region                                              title      key  \\\n",
       "0  africa                               Muwaschah Lamma Bada  g minor   \n",
       "1  mexico                                             CUCA 1  F major   \n",
       "2  mexico                                             CUCA 2  F major   \n",
       "3  mexico                                             CUCA 1  F major   \n",
       "4  mexico                                             CUCA 2  F major   \n",
       "5    misc  Die dienende Schwester Es wohnt ein Markgraf n...  F major   \n",
       "6    misc   Winterrosen Es kam ein Fraeulein mit ein'm Krueg  F major   \n",
       "7     usa     Die Schlangenkoechin 'Oh, where have you been,  G major   \n",
       "8     usa  Die Schlangenkoechin 'Oh, where have you been,...  G major   \n",
       "9     usa     Die Schlangenkoechin 'Oh, where have you been,  G major   \n",
       "\n",
       "                                                DGIs  \\\n",
       "0  ['P4', 'M2', 'm2', 'M2', 'M-2', 'P1', 'm-2', '...   \n",
       "1  ['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...   \n",
       "2  ['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...   \n",
       "3  ['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...   \n",
       "4  ['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...   \n",
       "5  ['P4', 'P-4', 'P1', 'P1', 'm-3', 'P4', 'P1', '...   \n",
       "6  ['P-4', 'P4', 'P1', 'P1', 'M2', 'M2', 'M-3', '...   \n",
       "7  ['P1', 'M6', 'P1', 'P1', 'M-2', 'M-2', 'P-4', ...   \n",
       "8  ['M3', 'P1', 'P1', 'P1', 'M-2', 'M-2', 'P1', '...   \n",
       "9  ['M2', 'M2', 'P1', 'P1', 'P1', 'M-2', 'P1', 'M...   \n",
       "\n",
       "                                     spelled_pitches  \n",
       "0  ['D5', 'G5', 'A5', 'B-5', 'C6', 'B-5', 'B-5', ...  \n",
       "1  ['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...  \n",
       "2  ['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...  \n",
       "3  ['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...  \n",
       "4  ['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...  \n",
       "5  ['C4', 'F4', 'C4', 'C4', 'C4', 'A3', 'D4', 'D4...  \n",
       "6  ['F4', 'C4', 'F4', 'F4', 'F4', 'G4', 'A4', 'F4...  \n",
       "7  ['D4', 'D4', 'B4', 'B4', 'B4', 'A4', 'G4', 'D4...  \n",
       "8  ['G4', 'B4', 'B4', 'B4', 'B4', 'A4', 'G4', 'G4...  \n",
       "9  ['G4', 'A4', 'B4', 'B4', 'B4', 'B4', 'A4', 'A4...  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"Essen_folksong_collection.csv\", sep=\"\\t\", index_col=0)\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "erk         1700\n",
       "han         1223\n",
       "polska       925\n",
       "shanxi       802\n",
       "boehme       704\n",
       "ballad       687\n",
       "zuccal       616\n",
       "fink         566\n",
       "altdeu2      316\n",
       "altdeu1      309\n",
       "kinder       213\n",
       "natmin       206\n",
       "jugoslav     115\n",
       "allerkbd     110\n",
       "dva          106\n",
       "oesterrh     104\n",
       "schweiz       93\n",
       "elsass        91\n",
       "nederlan      85\n",
       "lothring      71\n",
       "magyar        45\n",
       "czech         43\n",
       "rossiya       37\n",
       "misc          37\n",
       "romania       28\n",
       "variant       26\n",
       "tirol         14\n",
       "france        14\n",
       "ukraina       13\n",
       "test          12\n",
       "sverige       11\n",
       "xinhua        10\n",
       "danmark        9\n",
       "italia         8\n",
       "luxembrg       8\n",
       "usa            7\n",
       "mexico         4\n",
       "england        4\n",
       "africa         1\n",
       "Name: region, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.region.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 9373 entries, 0 to 9372\n",
      "Data columns (total 5 columns):\n",
      " #   Column           Non-Null Count  Dtype \n",
      "---  ------           --------------  ----- \n",
      " 0   region           9373 non-null   object\n",
      " 1   title            9373 non-null   object\n",
      " 2   key              9372 non-null   object\n",
      " 3   DGIs             9373 non-null   object\n",
      " 4   spelled_pitches  9373 non-null   object\n",
      "dtypes: object(5)\n",
      "memory usage: 439.4+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>region</th>\n",
       "      <th>title</th>\n",
       "      <th>key</th>\n",
       "      <th>DGIs</th>\n",
       "      <th>spelled_pitches</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1028</th>\n",
       "      <td>han</td>\n",
       "      <td>Yidui gezi xukongli fei</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     region                    title  key DGIs spelled_pitches\n",
       "1028    han  Yidui gezi xukongli fei  NaN   []              []"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"key\"].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(1028).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "G major     2831\n",
       "F major     1878\n",
       "C major     1309\n",
       "B- major     664\n",
       "D major      648\n",
       "A major      553\n",
       "g minor      370\n",
       "E- major     289\n",
       "a minor      284\n",
       "d minor      170\n",
       "E major      150\n",
       "e minor      109\n",
       "A- major      56\n",
       "f minor       19\n",
       "c minor       17\n",
       "b- minor       8\n",
       "D- major       6\n",
       "B major        4\n",
       "d- minor       2\n",
       "b minor        2\n",
       "f# minor       2\n",
       "e- minor       1\n",
       "Name: key, dtype: int64"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.key.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[[\"root_note\", \"mode\"]] = df[\"key\"].str.split(expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"root_note\"] = df[\"root_note\"].str.upper()\n",
    "# df[\"root_note\"] = df[\"root_note\"].str.replace(\"-\", \"b\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "G     3201\n",
       "F     1897\n",
       "C     1326\n",
       "A      837\n",
       "D      818\n",
       "B-     672\n",
       "E-     290\n",
       "E      259\n",
       "A-      56\n",
       "D-       8\n",
       "B        6\n",
       "F#       2\n",
       "Name: root_note, dtype: int64"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"root_note\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "major    8388\n",
       "minor     984\n",
       "Name: mode, dtype: int64"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"mode\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['F', 'C', 'G', 'D', 'A', 'E', 'B']\n"
     ]
    }
   ],
   "source": [
    "note_names = list(\"FCGDAEB\")\n",
    "print(note_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['F-', 'C-', 'G-', 'D-', 'A-', 'E-', 'B-', 'F', 'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'G#', 'D#', 'A#', 'E#', 'B#']\n"
     ]
    }
   ],
   "source": [
    "accidentals = [\"-\", \"\", \"#\"]\n",
    "tpcs = [ n + a for a in accidentals for n in note_names ]\n",
    "print(tpcs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(tpcs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'F-': -8,\n",
       " 'C-': -7,\n",
       " 'G-': -6,\n",
       " 'D-': -5,\n",
       " 'A-': -4,\n",
       " 'E-': -3,\n",
       " 'B-': -2,\n",
       " 'F': -1,\n",
       " 'C': 0,\n",
       " 'G': 1,\n",
       " 'D': 2,\n",
       " 'A': 3,\n",
       " 'E': 4,\n",
       " 'B': 5,\n",
       " 'F#': 6,\n",
       " 'C#': 7,\n",
       " 'G#': 8,\n",
       " 'D#': 9,\n",
       " 'A#': 10,\n",
       " 'E#': 11,\n",
       " 'B#': 12}"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "r = np.arange(len(tpcs)) - 8\n",
    "\n",
    "d = dict(zip(tpcs, r))\n",
    "\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"root_tpc\"] = df[\"root_note\"].map(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>region</th>\n",
       "      <th>title</th>\n",
       "      <th>key</th>\n",
       "      <th>DGIs</th>\n",
       "      <th>spelled_pitches</th>\n",
       "      <th>root_note</th>\n",
       "      <th>mode</th>\n",
       "      <th>root_tpc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>africa</td>\n",
       "      <td>Muwaschah Lamma Bada</td>\n",
       "      <td>g minor</td>\n",
       "      <td>['P4', 'M2', 'm2', 'M2', 'M-2', 'P1', 'm-2', '...</td>\n",
       "      <td>['D5', 'G5', 'A5', 'B-5', 'C6', 'B-5', 'B-5', ...</td>\n",
       "      <td>G</td>\n",
       "      <td>minor</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>mexico</td>\n",
       "      <td>CUCA 1</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...</td>\n",
       "      <td>['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...</td>\n",
       "      <td>F</td>\n",
       "      <td>major</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>mexico</td>\n",
       "      <td>CUCA 2</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...</td>\n",
       "      <td>['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...</td>\n",
       "      <td>F</td>\n",
       "      <td>major</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>mexico</td>\n",
       "      <td>CUCA 1</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...</td>\n",
       "      <td>['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...</td>\n",
       "      <td>F</td>\n",
       "      <td>major</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>mexico</td>\n",
       "      <td>CUCA 2</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...</td>\n",
       "      <td>['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...</td>\n",
       "      <td>F</td>\n",
       "      <td>major</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>misc</td>\n",
       "      <td>Die dienende Schwester Es wohnt ein Markgraf n...</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P4', 'P-4', 'P1', 'P1', 'm-3', 'P4', 'P1', '...</td>\n",
       "      <td>['C4', 'F4', 'C4', 'C4', 'C4', 'A3', 'D4', 'D4...</td>\n",
       "      <td>F</td>\n",
       "      <td>major</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>misc</td>\n",
       "      <td>Winterrosen Es kam ein Fraeulein mit ein'm Krueg</td>\n",
       "      <td>F major</td>\n",
       "      <td>['P-4', 'P4', 'P1', 'P1', 'M2', 'M2', 'M-3', '...</td>\n",
       "      <td>['F4', 'C4', 'F4', 'F4', 'F4', 'G4', 'A4', 'F4...</td>\n",
       "      <td>F</td>\n",
       "      <td>major</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>usa</td>\n",
       "      <td>Die Schlangenkoechin 'Oh, where have you been,</td>\n",
       "      <td>G major</td>\n",
       "      <td>['P1', 'M6', 'P1', 'P1', 'M-2', 'M-2', 'P-4', ...</td>\n",
       "      <td>['D4', 'D4', 'B4', 'B4', 'B4', 'A4', 'G4', 'D4...</td>\n",
       "      <td>G</td>\n",
       "      <td>major</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>usa</td>\n",
       "      <td>Die Schlangenkoechin 'Oh, where have you been,...</td>\n",
       "      <td>G major</td>\n",
       "      <td>['M3', 'P1', 'P1', 'P1', 'M-2', 'M-2', 'P1', '...</td>\n",
       "      <td>['G4', 'B4', 'B4', 'B4', 'B4', 'A4', 'G4', 'G4...</td>\n",
       "      <td>G</td>\n",
       "      <td>major</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>usa</td>\n",
       "      <td>Die Schlangenkoechin 'Oh, where have you been,</td>\n",
       "      <td>G major</td>\n",
       "      <td>['M2', 'M2', 'P1', 'P1', 'P1', 'M-2', 'P1', 'M...</td>\n",
       "      <td>['G4', 'A4', 'B4', 'B4', 'B4', 'B4', 'A4', 'A4...</td>\n",
       "      <td>G</td>\n",
       "      <td>major</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  region                                              title      key  \\\n",
       "0      0  africa                               Muwaschah Lamma Bada  g minor   \n",
       "1      1  mexico                                             CUCA 1  F major   \n",
       "2      2  mexico                                             CUCA 2  F major   \n",
       "3      3  mexico                                             CUCA 1  F major   \n",
       "4      4  mexico                                             CUCA 2  F major   \n",
       "5      5    misc  Die dienende Schwester Es wohnt ein Markgraf n...  F major   \n",
       "6      6    misc   Winterrosen Es kam ein Fraeulein mit ein'm Krueg  F major   \n",
       "7      7     usa     Die Schlangenkoechin 'Oh, where have you been,  G major   \n",
       "8      8     usa  Die Schlangenkoechin 'Oh, where have you been,...  G major   \n",
       "9      9     usa     Die Schlangenkoechin 'Oh, where have you been,  G major   \n",
       "\n",
       "                                                DGIs  \\\n",
       "0  ['P4', 'M2', 'm2', 'M2', 'M-2', 'P1', 'm-2', '...   \n",
       "1  ['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...   \n",
       "2  ['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...   \n",
       "3  ['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...   \n",
       "4  ['P1', 'P1', 'P4', 'M3', 'M-6', 'P1', 'P1', 'P...   \n",
       "5  ['P4', 'P-4', 'P1', 'P1', 'm-3', 'P4', 'P1', '...   \n",
       "6  ['P-4', 'P4', 'P1', 'P1', 'M2', 'M2', 'M-3', '...   \n",
       "7  ['P1', 'M6', 'P1', 'P1', 'M-2', 'M-2', 'P-4', ...   \n",
       "8  ['M3', 'P1', 'P1', 'P1', 'M-2', 'M-2', 'P1', '...   \n",
       "9  ['M2', 'M2', 'P1', 'P1', 'P1', 'M-2', 'P1', 'M...   \n",
       "\n",
       "                                     spelled_pitches root_note   mode  \\\n",
       "0  ['D5', 'G5', 'A5', 'B-5', 'C6', 'B-5', 'B-5', ...         G  minor   \n",
       "1  ['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...         F  major   \n",
       "2  ['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...         F  major   \n",
       "3  ['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...         F  major   \n",
       "4  ['C4', 'C4', 'C4', 'F4', 'A4', 'C4', 'C4', 'C4...         F  major   \n",
       "5  ['C4', 'F4', 'C4', 'C4', 'C4', 'A3', 'D4', 'D4...         F  major   \n",
       "6  ['F4', 'C4', 'F4', 'F4', 'F4', 'G4', 'A4', 'F4...         F  major   \n",
       "7  ['D4', 'D4', 'B4', 'B4', 'B4', 'A4', 'G4', 'D4...         G  major   \n",
       "8  ['G4', 'B4', 'B4', 'B4', 'B4', 'A4', 'G4', 'G4...         G  major   \n",
       "9  ['G4', 'A4', 'B4', 'B4', 'B4', 'B4', 'A4', 'A4...         G  major   \n",
       "\n",
       "   root_tpc  \n",
       "0         1  \n",
       "1        -1  \n",
       "2        -1  \n",
       "3        -1  \n",
       "4        -1  \n",
       "5        -1  \n",
       "6        -1  \n",
       "7         1  \n",
       "8         1  \n",
       "9         1  "
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re \n",
    "\n",
    "pattern = \".*([A-G]\\-?\\d).*\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each note is represented as a *tonal pitch class* and an *octave number* (p, o)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "example_piece = 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [],
   "source": [
    "tpc_list = [re.match(pattern, p).groups()[0][:-1] for p in df[\"spelled_pitches\"][example_piece].split() if re.match(pattern, p)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['G', 'E', 'G', 'C', 'A', 'G', 'G', 'E', 'G', 'A', 'G', 'G', 'E', 'G', 'C', 'A', 'G', 'G', 'E', 'G', 'A', 'G', 'G', 'E', 'E', 'D', 'C', 'A', 'G', 'E', 'E', 'D', 'C', 'D', 'B', 'A', 'G', 'A', 'C', 'A', 'G', 'G', 'E', 'G', 'A', 'G', 'A', 'C', 'A', 'G', 'A', 'G', 'A', 'C', 'A', 'G', 'A', 'C', 'A', 'C', 'A', 'G', 'E', 'G', 'E', 'D', 'D', 'E', 'G', 'E', 'D', 'C', 'D']\n"
     ]
    }
   ],
   "source": [
    "print(tpc_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(tpc_list).value_counts().plot(kind=\"bar\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert tpcs to scale npcs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [],
   "source": [
    "def npc(tpc): \n",
    "    \"\"\"\n",
    "    Takes a tonal pitch class (as string) and returns a neutral pitch class in chromatic order.\n",
    "    \"\"\"\n",
    "    n = d[tpc]\n",
    "    return (n % 12) * 7 % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[7, 4, 7, 0, 9, 7, 7, 4, 7, 9, 7, 7, 4, 7, 0, 9, 7, 7, 4, 7, 9, 7, 7, 4, 4, 2, 0, 9, 7, 4, 4, 2, 0, 2, 11, 9, 7, 9, 0, 9, 7, 7, 4, 7, 9, 7, 9, 0, 9, 7, 9, 7, 9, 0, 9, 7, 9, 0, 9, 0, 9, 7, 4, 7, 4, 2, 2, 4, 7, 4, 2, 0, 2]\n"
     ]
    }
   ],
   "source": [
    "npcs = [ npc(tpc) for tpc in tpc_list ]\n",
    "print(npcs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "s = pd.Series(npcs)\n",
    "\n",
    "counts = s.value_counts().reindex(np.arange(12)).fillna(0)\n",
    "\n",
    "counts.plot(kind=\"bar\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [],
   "source": [
    "# transpose npcs to scale degrees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [],
   "source": [
    "shifted_index = (counts.index - (df[\"root_tpc\"][example_piece] * 7)) % 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], dtype='int64')"
      ]
     },
     "execution_count": 315,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shifted_index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts.index = shifted_index\n",
    "counts.sort_index().plot(kind=\"bar\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
