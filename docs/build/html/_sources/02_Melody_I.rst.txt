Folk Songs
==========

.. code:: ipython3

    import pandas as pd
    import music21 as m21
    import numpy as np
    import statsmodels.api as sm
    
    import matplotlib.pyplot as plt
    import matplotlib as mpl
    mpl.rc_context(rc=None, fname="../matplotlibrc");

.. code:: ipython3

    # parse all
    corpora = m21.corpus.getComposer('essenFolksong')

.. code:: ipython3

    german_song = m21.converter.parse(corpora[0])[70]
    german_song.show(fmt="musicxml.png", fp="./img/german_song.png")
    german_song.show()



.. image:: output_3_0.png
   :width: 753px
   :height: 286px


.. code:: ipython3

    german_song.show("mid")

.. code:: ipython3

    %%time 
    
    # takes about 5 mins
    
    songs = [s for i in range(len(corpora)) for s in m21.converter.parse(corpora[i]) ]


.. parsed-literal::

    Wall time: 57.5 s
    

.. code:: ipython3

    len(songs)




.. parsed-literal::

    8514



.. code:: ipython3

    chinese_song = songs[6200]
    chinese_song.show(fmt="musicxml.png", fp="./img/chinese_song.png")
    chinese_song.show()



.. image:: output_7_0.png
   :width: 753px
   :height: 286px


.. code:: ipython3

    chinese_song.show("mid")

.. code:: ipython3

    [(note.pitch.midi, note.quarterLength/4) for note in chinese_song.flat.notes][:10]




.. parsed-literal::

    [(72, 0.1875),
     (72, 0.0625),
     (74, 0.125),
     (77, 0.125),
     (72, 0.1875),
     (74, 0.0625),
     (72, 0.125),
     (69, 0.125),
     (67, 0.125),
     (69, 0.0625)]



.. code:: ipython3

    dfs = []
    
    for i in range(len(songs)):
        df = pd.DataFrame( [(i, note.pitch.midi, note.quarterLength/4) for note in songs[i].flat.notes ], columns=["song_id", "pitch", "duration"])
        df["onset"] = df["duration"].cumsum()
        df["rel_onset"] = df["onset"] / df["onset"].max()
        df["Z_pitch"] = (df["pitch"] - df["pitch"].mean())/df["pitch"].std(ddof=0)
        
        dfs.append(df)
    
    big_df = pd.concat(dfs).reset_index(drop=True)
    big_df.to_csv("data/big_df.csv")
    big_df.shape




.. parsed-literal::

    (450596, 6)



.. code:: ipython3

    big_df.head(10)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>piece_id</th>
          <th>pitch</th>
          <th>duration</th>
          <th>onset</th>
          <th>rel_onset</th>
          <th>Z_pitch</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0</td>
          <td>67</td>
          <td>0.5</td>
          <td>0.5</td>
          <td>0.013158</td>
          <td>-1.834390</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0</td>
          <td>70</td>
          <td>0.5</td>
          <td>1.0</td>
          <td>0.026316</td>
          <td>-0.748238</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0</td>
          <td>71</td>
          <td>0.5</td>
          <td>1.5</td>
          <td>0.039474</td>
          <td>-0.386187</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0</td>
          <td>72</td>
          <td>0.5</td>
          <td>2.0</td>
          <td>0.052632</td>
          <td>-0.024137</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0</td>
          <td>72</td>
          <td>0.5</td>
          <td>2.5</td>
          <td>0.065789</td>
          <td>-0.024137</td>
        </tr>
        <tr>
          <th>5</th>
          <td>0</td>
          <td>74</td>
          <td>1.0</td>
          <td>3.5</td>
          <td>0.092105</td>
          <td>0.699965</td>
        </tr>
        <tr>
          <th>6</th>
          <td>0</td>
          <td>74</td>
          <td>1.0</td>
          <td>4.5</td>
          <td>0.118421</td>
          <td>0.699965</td>
        </tr>
        <tr>
          <th>7</th>
          <td>0</td>
          <td>74</td>
          <td>1.0</td>
          <td>5.5</td>
          <td>0.144737</td>
          <td>0.699965</td>
        </tr>
        <tr>
          <th>8</th>
          <td>0</td>
          <td>74</td>
          <td>0.5</td>
          <td>6.0</td>
          <td>0.157895</td>
          <td>0.699965</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0</td>
          <td>74</td>
          <td>0.5</td>
          <td>6.5</td>
          <td>0.171053</td>
          <td>0.699965</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    big_df.tail()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>piece_id</th>
          <th>pitch</th>
          <th>duration</th>
          <th>onset</th>
          <th>rel_onset</th>
          <th>Z_pitch</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>450591</th>
          <td>8513</td>
          <td>71</td>
          <td>0.0625</td>
          <td>7.1250</td>
          <td>0.934426</td>
          <td>0.696113</td>
        </tr>
        <tr>
          <th>450592</th>
          <td>8513</td>
          <td>69</td>
          <td>0.0625</td>
          <td>7.1875</td>
          <td>0.942623</td>
          <td>0.099445</td>
        </tr>
        <tr>
          <th>450593</th>
          <td>8513</td>
          <td>73</td>
          <td>0.0625</td>
          <td>7.2500</td>
          <td>0.950820</td>
          <td>1.292781</td>
        </tr>
        <tr>
          <th>450594</th>
          <td>8513</td>
          <td>71</td>
          <td>0.2500</td>
          <td>7.5000</td>
          <td>0.983607</td>
          <td>0.696113</td>
        </tr>
        <tr>
          <th>450595</th>
          <td>8513</td>
          <td>69</td>
          <td>0.1250</td>
          <td>7.6250</td>
          <td>1.000000</td>
          <td>0.099445</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    big_df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>piece_id</th>
          <th>pitch</th>
          <th>duration</th>
          <th>onset</th>
          <th>rel_onset</th>
          <th>Z_pitch</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>84723</th>
          <td>1952</td>
          <td>62</td>
          <td>0.250</td>
          <td>3.000</td>
          <td>0.206897</td>
          <td>-2.068852</td>
        </tr>
        <tr>
          <th>208027</th>
          <td>4441</td>
          <td>67</td>
          <td>0.375</td>
          <td>0.625</td>
          <td>0.086207</td>
          <td>-0.850686</td>
        </tr>
        <tr>
          <th>114121</th>
          <td>2463</td>
          <td>62</td>
          <td>0.375</td>
          <td>10.375</td>
          <td>0.576389</td>
          <td>0.879004</td>
        </tr>
        <tr>
          <th>222508</th>
          <td>4724</td>
          <td>72</td>
          <td>0.250</td>
          <td>20.500</td>
          <td>0.881720</td>
          <td>0.771902</td>
        </tr>
        <tr>
          <th>352331</th>
          <td>6615</td>
          <td>67</td>
          <td>0.250</td>
          <td>4.000</td>
          <td>0.266667</td>
          <td>0.635128</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    big_df["pitch"].value_counts().sort_index().plot(kind="bar");



.. image:: output_14_0.png
   :width: 570px
   :height: 416px


.. code:: ipython3

    # FIRST concat dfs and THEN create new cols

.. code:: ipython3

    big_df["Z_pitch"].plot(kind="kde");



.. image:: output_16_0.png
   :width: 576px
   :height: 415px


.. code:: ipython3

    big_df["duration"].plot(kind="kde",xlim=(0,1.2));



.. image:: output_17_0.png
   :width: 573px
   :height: 413px





.. code:: ipython3

    fig, ax = plt.subplots()
    plt.xlim(0,1)
    
    ax.axvline(.25, lw=1, ls="--", c="gray")
    ax.axvline(.5, lw=1, ls="--", c="gray")
    ax.axvline(.75, lw=1, ls="--", c="gray")
    ax.axhline(0, lw=1, ls="--", c="gray")
    
    grouped = big_df.groupby("piece_id")
    
    for i, g in grouped:
            x = g["rel_onset"].values
            y = g["Z_pitch"].values
            ax.plot(x,y, c="red", lw=1, alpha=0.0025)
    
    lowess = sm.nonparametric.lowess
    big_x = big_df["rel_onset"].values
    big_y = big_df["Z_pitch"].values
    big_z = lowess(big_y, big_x, frac=5/100)
    ax.plot(big_z[:,0], big_z[:,1], c="black", lw=3)
    
    plt.title("Melodic arc")
    plt.xlabel("Relative onset")
    plt.ylabel("Pitch deviation")
    
    plt.tight_layout()
    plt.savefig("img/melodic_arc.png", dpi=300)
    plt.show()



.. image:: output_21_0.png
   :width: 629px
   :height: 471px


